{"remainingRequest":"C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\node_modules\\ts-loader\\index.js??ref--9-3!C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\node_modules\\tslint-loader\\index.js!C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\src\\main\\webapp\\app\\blocks\\interceptor\\auth-expired.interceptor.ts","dependencies":[{"path":"C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\src\\main\\webapp\\app\\blocks\\interceptor\\auth-expired.interceptor.ts","mtime":1559825299434},{"path":"C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\node_modules\\angular2-template-loader\\index.js","mtime":1559824741317},{"path":"C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1559824860230},{"path":"C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1559825261749},{"path":"C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\node_modules\\ts-loader\\index.js","mtime":1559825264809},{"path":"C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\node_modules\\angular-router-loader\\src\\index.js","mtime":1559824740677},{"path":"C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\node_modules\\tslint-loader\\index.js","mtime":1559825264989}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\nvar _a;\r\nconst core_1 = require(\"@angular/core\");\r\nconst http_1 = require(\"@angular/common/http\");\r\nconst operators_1 = require(\"rxjs/operators\");\r\nconst login_service_1 = require(\"app/core/login/login.service\");\r\nlet AuthExpiredInterceptor = class AuthExpiredInterceptor {\r\n    constructor(loginService) {\r\n        this.loginService = loginService;\r\n    }\r\n    intercept(request, next) {\r\n        return next.handle(request).pipe(operators_1.tap((event) => { }, (err) => {\r\n            if (err instanceof http_1.HttpErrorResponse) {\r\n                if (err.status === 401) {\r\n                    this.loginService.logout();\r\n                }\r\n            }\r\n        }));\r\n    }\r\n};\r\nAuthExpiredInterceptor = tslib_1.__decorate([\r\n    core_1.Injectable(),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof login_service_1.LoginService !== \"undefined\" && login_service_1.LoginService) === \"function\" ? _a : Object])\r\n], AuthExpiredInterceptor);\r\nexports.AuthExpiredInterceptor = AuthExpiredInterceptor;\r\n",{"version":3,"file":"C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\src\\main\\webapp\\app\\blocks\\interceptor\\auth-expired.interceptor.ts","sourceRoot":"","sources":["C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\node_modules\\tslint-loader\\index.js!C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\src\\main\\webapp\\app\\blocks\\interceptor\\auth-expired.interceptor.ts"],"names":[],"mappings":";;;;AAAA,wCAA2C;AAC3C,+CAA+G;AAE/G,8CAAqC;AACrC,gEAA4D;AAG5D,IAAa,sBAAsB,GAAnC,MAAa,sBAAsB;IACjC,YAAoB,YAA0B;QAA1B,iBAAY,GAAZ,YAAY,CAAc;IAAG,CAAC;IAElD,SAAS,CAAC,OAAyB,EAAE,IAAiB;QACpD,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAC9B,eAAG,CACD,CAAC,KAAqB,EAAE,EAAE,GAAE,CAAC,EAC7B,CAAC,GAAQ,EAAE,EAAE;YACX,IAAI,GAAG,YAAY,wBAAiB,EAAE;gBACpC,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE;oBACtB,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;iBAC5B;aACF;QACH,CAAC,CACF,CACF,CAAC;IACJ,CAAC;CACF,CAAA;AAjBY,sBAAsB;IADlC,iBAAU,EAAE;iEAEuB,4BAAY,oBAAZ,4BAAY;GADnC,sBAAsB,CAiBlC;AAjBY,wDAAsB","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { LoginService } from 'app/core/login/login.service';\r\n\r\n@Injectable()\r\nexport class AuthExpiredInterceptor implements HttpInterceptor {\r\n  constructor(private loginService: LoginService) {}\r\n\r\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    return next.handle(request).pipe(\r\n      tap(\r\n        (event: HttpEvent<any>) => {},\r\n        (err: any) => {\r\n          if (err instanceof HttpErrorResponse) {\r\n            if (err.status === 401) {\r\n              this.loginService.logout();\r\n            }\r\n          }\r\n        }\r\n      )\r\n    );\r\n  }\r\n}\r\n"]}]}