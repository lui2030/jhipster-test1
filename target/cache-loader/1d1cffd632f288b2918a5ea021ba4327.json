{"remainingRequest":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\ts-loader\\index.js??ref--9-3!C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\tslint-loader\\index.js!C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\src\\main\\webapp\\app\\entities\\dipendente\\dipendente.service.ts","dependencies":[{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\src\\main\\webapp\\app\\entities\\dipendente\\dipendente.service.ts","mtime":1559806071658},{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\tslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\nvar _a;\r\nconst core_1 = require(\"@angular/core\");\r\nconst http_1 = require(\"@angular/common/http\");\r\nconst moment = require(\"moment\");\r\nconst input_constants_1 = require(\"app/shared/constants/input.constants\");\r\nconst operators_1 = require(\"rxjs/operators\");\r\nconst app_constants_1 = require(\"app/app.constants\");\r\nconst shared_1 = require(\"app/shared\");\r\nlet DipendenteService = class DipendenteService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.resourceUrl = app_constants_1.SERVER_API_URL + 'api/dipendentes';\r\n    }\r\n    create(dipendente) {\r\n        const copy = this.convertDateFromClient(dipendente);\r\n        return this.http\r\n            .post(this.resourceUrl, copy, { observe: 'response' })\r\n            .pipe(operators_1.map((res) => this.convertDateFromServer(res)));\r\n    }\r\n    update(dipendente) {\r\n        const copy = this.convertDateFromClient(dipendente);\r\n        return this.http\r\n            .put(this.resourceUrl, copy, { observe: 'response' })\r\n            .pipe(operators_1.map((res) => this.convertDateFromServer(res)));\r\n    }\r\n    find(id) {\r\n        return this.http\r\n            .get(`${this.resourceUrl}/${id}`, { observe: 'response' })\r\n            .pipe(operators_1.map((res) => this.convertDateFromServer(res)));\r\n    }\r\n    query(req) {\r\n        const options = shared_1.createRequestOption(req);\r\n        return this.http\r\n            .get(this.resourceUrl, { params: options, observe: 'response' })\r\n            .pipe(operators_1.map((res) => this.convertDateArrayFromServer(res)));\r\n    }\r\n    delete(id) {\r\n        return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\r\n    }\r\n    convertDateFromClient(dipendente) {\r\n        const copy = Object.assign({}, dipendente, {\r\n            dataNascita: dipendente.dataNascita != null && dipendente.dataNascita.isValid() ? dipendente.dataNascita.format(input_constants_1.DATE_FORMAT) : null\r\n        });\r\n        return copy;\r\n    }\r\n    convertDateFromServer(res) {\r\n        if (res.body) {\r\n            res.body.dataNascita = res.body.dataNascita != null ? moment(res.body.dataNascita) : null;\r\n        }\r\n        return res;\r\n    }\r\n    convertDateArrayFromServer(res) {\r\n        if (res.body) {\r\n            res.body.forEach((dipendente) => {\r\n                dipendente.dataNascita = dipendente.dataNascita != null ? moment(dipendente.dataNascita) : null;\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n};\r\nDipendenteService = tslib_1.__decorate([\r\n    core_1.Injectable({ providedIn: 'root' }),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" ? _a : Object])\r\n], DipendenteService);\r\nexports.DipendenteService = DipendenteService;\r\n",{"version":3,"file":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\src\\main\\webapp\\app\\entities\\dipendente\\dipendente.service.ts","sourceRoot":"","sources":["C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\tslint-loader\\index.js!C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\src\\main\\webapp\\app\\entities\\dipendente\\dipendente.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport * as moment from 'moment';\r\nimport { DATE_FORMAT } from 'app/shared/constants/input.constants';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { SERVER_API_URL } from 'app/app.constants';\r\nimport { createRequestOption } from 'app/shared';\r\nimport { IDipendente } from 'app/shared/model/dipendente.model';\r\n\r\ntype EntityResponseType = HttpResponse<IDipendente>;\r\ntype EntityArrayResponseType = HttpResponse<IDipendente[]>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class DipendenteService {\r\n  public resourceUrl = SERVER_API_URL + 'api/dipendentes';\r\n\r\n  constructor(protected http: HttpClient) {}\r\n\r\n  create(dipendente: IDipendente): Observable<EntityResponseType> {\r\n    const copy = this.convertDateFromClient(dipendente);\r\n    return this.http\r\n      .post<IDipendente>(this.resourceUrl, copy, { observe: 'response' })\r\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\r\n  }\r\n\r\n  update(dipendente: IDipendente): Observable<EntityResponseType> {\r\n    const copy = this.convertDateFromClient(dipendente);\r\n    return this.http\r\n      .put<IDipendente>(this.resourceUrl, copy, { observe: 'response' })\r\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\r\n  }\r\n\r\n  find(id: number): Observable<EntityResponseType> {\r\n    return this.http\r\n      .get<IDipendente>(`${this.resourceUrl}/${id}`, { observe: 'response' })\r\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\r\n  }\r\n\r\n  query(req?: any): Observable<EntityArrayResponseType> {\r\n    const options = createRequestOption(req);\r\n    return this.http\r\n      .get<IDipendente[]>(this.resourceUrl, { params: options, observe: 'response' })\r\n      .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\r\n  }\r\n\r\n  delete(id: number): Observable<HttpResponse<any>> {\r\n    return this.http.delete<any>(`${this.resourceUrl}/${id}`, { observe: 'response' });\r\n  }\r\n\r\n  protected convertDateFromClient(dipendente: IDipendente): IDipendente {\r\n    const copy: IDipendente = Object.assign({}, dipendente, {\r\n      dataNascita: dipendente.dataNascita != null && dipendente.dataNascita.isValid() ? dipendente.dataNascita.format(DATE_FORMAT) : null\r\n    });\r\n    return copy;\r\n  }\r\n\r\n  protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\r\n    if (res.body) {\r\n      res.body.dataNascita = res.body.dataNascita != null ? moment(res.body.dataNascita) : null;\r\n    }\r\n    return res;\r\n  }\r\n\r\n  protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\r\n    if (res.body) {\r\n      res.body.forEach((dipendente: IDipendente) => {\r\n        dipendente.dataNascita = dipendente.dataNascita != null ? moment(dipendente.dataNascita) : null;\r\n      });\r\n    }\r\n    return res;\r\n  }\r\n}\r\n"]}]}