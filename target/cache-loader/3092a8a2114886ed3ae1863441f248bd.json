{"remainingRequest":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\ts-loader\\index.js??ref--9-3!C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\tslint-loader\\index.js!C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\src\\main\\webapp\\app\\admin\\health\\health.service.ts","dependencies":[{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\src\\main\\webapp\\app\\admin\\health\\health.service.ts","mtime":1559806071488},{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\tslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\nvar _a;\r\nconst core_1 = require(\"@angular/core\");\r\nconst http_1 = require(\"@angular/common/http\");\r\nconst app_constants_1 = require(\"app/app.constants\");\r\nlet JhiHealthService = class JhiHealthService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.separator = '.';\r\n    }\r\n    checkHealth() {\r\n        return this.http.get(app_constants_1.SERVER_API_URL + 'management/health');\r\n    }\r\n    transformHealthData(data) {\r\n        const response = [];\r\n        this.flattenHealthData(response, null, data.details);\r\n        return response;\r\n    }\r\n    getBaseName(name) {\r\n        if (name) {\r\n            const split = name.split('.');\r\n            return split[0];\r\n        }\r\n    }\r\n    getSubSystemName(name) {\r\n        if (name) {\r\n            const split = name.split('.');\r\n            split.splice(0, 1);\r\n            const remainder = split.join('.');\r\n            return remainder ? ' - ' + remainder : '';\r\n        }\r\n    }\r\n    /* private methods */\r\n    addHealthObject(result, isLeaf, healthObject, name) {\r\n        const healthData = {\r\n            name\r\n        };\r\n        const details = {};\r\n        let hasDetails = false;\r\n        for (const key in healthObject) {\r\n            if (healthObject.hasOwnProperty(key)) {\r\n                const value = healthObject[key];\r\n                if (key === 'status' || key === 'error') {\r\n                    healthData[key] = value;\r\n                }\r\n                else {\r\n                    if (!this.isHealthObject(value)) {\r\n                        details[key] = value;\r\n                        hasDetails = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // Add the details\r\n        if (hasDetails) {\r\n            healthData.details = details;\r\n        }\r\n        // Only add nodes if they provide additional information\r\n        if (isLeaf || hasDetails || healthData.error) {\r\n            result.push(healthData);\r\n        }\r\n        return healthData;\r\n    }\r\n    flattenHealthData(result, path, data) {\r\n        for (const key in data) {\r\n            if (data.hasOwnProperty(key)) {\r\n                const value = data[key];\r\n                if (this.isHealthObject(value)) {\r\n                    if (this.hasSubSystem(value)) {\r\n                        this.addHealthObject(result, false, value, this.getModuleName(path, key));\r\n                        this.flattenHealthData(result, this.getModuleName(path, key), value);\r\n                    }\r\n                    else {\r\n                        this.addHealthObject(result, true, value, this.getModuleName(path, key));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    getModuleName(path, name) {\r\n        let result;\r\n        if (path && name) {\r\n            result = path + this.separator + name;\r\n        }\r\n        else if (path) {\r\n            result = path;\r\n        }\r\n        else if (name) {\r\n            result = name;\r\n        }\r\n        else {\r\n            result = '';\r\n        }\r\n        return result;\r\n    }\r\n    hasSubSystem(healthObject) {\r\n        let result = false;\r\n        for (const key in healthObject) {\r\n            if (healthObject.hasOwnProperty(key)) {\r\n                const value = healthObject[key];\r\n                if (value && value.status) {\r\n                    result = true;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    isHealthObject(healthObject) {\r\n        let result = false;\r\n        for (const key in healthObject) {\r\n            if (healthObject.hasOwnProperty(key)) {\r\n                if (key === 'status') {\r\n                    result = true;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n};\r\nJhiHealthService = tslib_1.__decorate([\r\n    core_1.Injectable({ providedIn: 'root' }),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" ? _a : Object])\r\n], JhiHealthService);\r\nexports.JhiHealthService = JhiHealthService;\r\n",{"version":3,"file":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\src\\main\\webapp\\app\\admin\\health\\health.service.ts","sourceRoot":"","sources":["C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\tslint-loader\\index.js!C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\src\\main\\webapp\\app\\admin\\health\\health.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { SERVER_API_URL } from 'app/app.constants';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class JhiHealthService {\r\n  separator: string;\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.separator = '.';\r\n  }\r\n\r\n  checkHealth(): Observable<any> {\r\n    return this.http.get(SERVER_API_URL + 'management/health');\r\n  }\r\n\r\n  transformHealthData(data): any {\r\n    const response = [];\r\n    this.flattenHealthData(response, null, data.details);\r\n    return response;\r\n  }\r\n\r\n  getBaseName(name): string {\r\n    if (name) {\r\n      const split = name.split('.');\r\n      return split[0];\r\n    }\r\n  }\r\n\r\n  getSubSystemName(name): string {\r\n    if (name) {\r\n      const split = name.split('.');\r\n      split.splice(0, 1);\r\n      const remainder = split.join('.');\r\n      return remainder ? ' - ' + remainder : '';\r\n    }\r\n  }\r\n\r\n  /* private methods */\r\n  private addHealthObject(result, isLeaf, healthObject, name): any {\r\n    const healthData: any = {\r\n      name\r\n    };\r\n\r\n    const details = {};\r\n    let hasDetails = false;\r\n\r\n    for (const key in healthObject) {\r\n      if (healthObject.hasOwnProperty(key)) {\r\n        const value = healthObject[key];\r\n        if (key === 'status' || key === 'error') {\r\n          healthData[key] = value;\r\n        } else {\r\n          if (!this.isHealthObject(value)) {\r\n            details[key] = value;\r\n            hasDetails = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Add the details\r\n    if (hasDetails) {\r\n      healthData.details = details;\r\n    }\r\n\r\n    // Only add nodes if they provide additional information\r\n    if (isLeaf || hasDetails || healthData.error) {\r\n      result.push(healthData);\r\n    }\r\n    return healthData;\r\n  }\r\n\r\n  private flattenHealthData(result, path, data): any {\r\n    for (const key in data) {\r\n      if (data.hasOwnProperty(key)) {\r\n        const value = data[key];\r\n        if (this.isHealthObject(value)) {\r\n          if (this.hasSubSystem(value)) {\r\n            this.addHealthObject(result, false, value, this.getModuleName(path, key));\r\n            this.flattenHealthData(result, this.getModuleName(path, key), value);\r\n          } else {\r\n            this.addHealthObject(result, true, value, this.getModuleName(path, key));\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private getModuleName(path, name): string {\r\n    let result;\r\n    if (path && name) {\r\n      result = path + this.separator + name;\r\n    } else if (path) {\r\n      result = path;\r\n    } else if (name) {\r\n      result = name;\r\n    } else {\r\n      result = '';\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private hasSubSystem(healthObject): boolean {\r\n    let result = false;\r\n\r\n    for (const key in healthObject) {\r\n      if (healthObject.hasOwnProperty(key)) {\r\n        const value = healthObject[key];\r\n        if (value && value.status) {\r\n          result = true;\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private isHealthObject(healthObject): boolean {\r\n    let result = false;\r\n\r\n    for (const key in healthObject) {\r\n      if (healthObject.hasOwnProperty(key)) {\r\n        if (key === 'status') {\r\n          result = true;\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}\r\n"]}]}