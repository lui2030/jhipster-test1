{"remainingRequest":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\ts-loader\\index.js??ref--9-3!C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\tslint-loader\\index.js!C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\src\\main\\webapp\\app\\core\\auth\\user-route-access-service.ts","dependencies":[{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\src\\main\\webapp\\app\\core\\auth\\user-route-access-service.ts","mtime":1559806071618},{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\tslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\nvar _a, _b, _c, _d;\r\nconst core_1 = require(\"@angular/core\");\r\nconst router_1 = require(\"@angular/router\");\r\nconst core_2 = require(\"app/core/\");\r\nconst login_modal_service_1 = require(\"app/core/login/login-modal.service\");\r\nconst state_storage_service_1 = require(\"./state-storage.service\");\r\nlet UserRouteAccessService = class UserRouteAccessService {\r\n    constructor(router, loginModalService, accountService, stateStorageService) {\r\n        this.router = router;\r\n        this.loginModalService = loginModalService;\r\n        this.accountService = accountService;\r\n        this.stateStorageService = stateStorageService;\r\n    }\r\n    canActivate(route, state) {\r\n        const authorities = route.data['authorities'];\r\n        // We need to call the checkLogin / and so the accountService.identity() function, to ensure,\r\n        // that the client has a principal too, if they already logged in by the server.\r\n        // This could happen on a page refresh.\r\n        return this.checkLogin(authorities, state.url);\r\n    }\r\n    checkLogin(authorities, url) {\r\n        return this.accountService.identity().then(account => {\r\n            if (!authorities || authorities.length === 0) {\r\n                return true;\r\n            }\r\n            if (account) {\r\n                const hasAnyAuthority = this.accountService.hasAnyAuthority(authorities);\r\n                if (hasAnyAuthority) {\r\n                    return true;\r\n                }\r\n                if (core_1.isDevMode()) {\r\n                    console.error('User has not any of required authorities: ', authorities);\r\n                }\r\n                return false;\r\n            }\r\n            this.stateStorageService.storeUrl(url);\r\n            this.router.navigate(['accessdenied']).then(() => {\r\n                // only show the login dialog, if the user hasn't logged in yet\r\n                if (!account) {\r\n                    this.loginModalService.open();\r\n                }\r\n            });\r\n            return false;\r\n        });\r\n    }\r\n};\r\nUserRouteAccessService = tslib_1.__decorate([\r\n    core_1.Injectable({ providedIn: 'root' }),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof router_1.Router !== \"undefined\" && router_1.Router) === \"function\" ? _a : Object, typeof (_b = typeof login_modal_service_1.LoginModalService !== \"undefined\" && login_modal_service_1.LoginModalService) === \"function\" ? _b : Object, typeof (_c = typeof core_2.AccountService !== \"undefined\" && core_2.AccountService) === \"function\" ? _c : Object, typeof (_d = typeof state_storage_service_1.StateStorageService !== \"undefined\" && state_storage_service_1.StateStorageService) === \"function\" ? _d : Object])\r\n], UserRouteAccessService);\r\nexports.UserRouteAccessService = UserRouteAccessService;\r\n",{"version":3,"file":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\src\\main\\webapp\\app\\core\\auth\\user-route-access-service.ts","sourceRoot":"","sources":["C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\tslint-loader\\index.js!C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\src\\main\\webapp\\app\\core\\auth\\user-route-access-service.ts"],"names":[],"mappings":";;;;AAAA,wCAAsD;AACtD,4CAAmG;AAEnG,oCAA2C;AAC3C,4EAAuE;AACvE,mEAA8D;AAG9D,IAAa,sBAAsB,GAAnC,MAAa,sBAAsB;IACjC,YACU,MAAc,EACd,iBAAoC,EACpC,cAA8B,EAC9B,mBAAwC;QAHxC,WAAM,GAAN,MAAM,CAAQ;QACd,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,mBAAc,GAAd,cAAc,CAAgB;QAC9B,wBAAmB,GAAnB,mBAAmB,CAAqB;IAC/C,CAAC;IAEJ,WAAW,CAAC,KAA6B,EAAE,KAA0B;QACnE,MAAM,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC9C,6FAA6F;QAC7F,gFAAgF;QAChF,uCAAuC;QACvC,OAAO,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;IACjD,CAAC;IAED,UAAU,CAAC,WAAqB,EAAE,GAAW;QAC3C,OAAO,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;YACnD,IAAI,CAAC,WAAW,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC5C,OAAO,IAAI,CAAC;aACb;YAED,IAAI,OAAO,EAAE;gBACX,MAAM,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;gBACzE,IAAI,eAAe,EAAE;oBACnB,OAAO,IAAI,CAAC;iBACb;gBACD,IAAI,gBAAS,EAAE,EAAE;oBACf,OAAO,CAAC,KAAK,CAAC,4CAA4C,EAAE,WAAW,CAAC,CAAC;iBAC1E;gBACD,OAAO,KAAK,CAAC;aACd;YAED,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACvC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;gBAC/C,+DAA+D;gBAC/D,IAAI,CAAC,OAAO,EAAE;oBACZ,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;iBAC/B;YACH,CAAC,CAAC,CAAC;YACH,OAAO,KAAK,CAAC;QACf,CAAC,CAAC,CAAC;IACL,CAAC;CACF,CAAA;AA3CY,sBAAsB;IADlC,iBAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;iEAGf,eAAM,oBAAN,eAAM,oDACK,uCAAiB,oBAAjB,uCAAiB,oDACpB,qBAAc,oBAAd,qBAAc,oDACT,2CAAmB,oBAAnB,2CAAmB;GALvC,sBAAsB,CA2ClC;AA3CY,wDAAsB","sourcesContent":["import { Injectable, isDevMode } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\r\n\r\nimport { AccountService } from 'app/core/';\r\nimport { LoginModalService } from 'app/core/login/login-modal.service';\r\nimport { StateStorageService } from './state-storage.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UserRouteAccessService implements CanActivate {\r\n  constructor(\r\n    private router: Router,\r\n    private loginModalService: LoginModalService,\r\n    private accountService: AccountService,\r\n    private stateStorageService: StateStorageService\r\n  ) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | Promise<boolean> {\r\n    const authorities = route.data['authorities'];\r\n    // We need to call the checkLogin / and so the accountService.identity() function, to ensure,\r\n    // that the client has a principal too, if they already logged in by the server.\r\n    // This could happen on a page refresh.\r\n    return this.checkLogin(authorities, state.url);\r\n  }\r\n\r\n  checkLogin(authorities: string[], url: string): Promise<boolean> {\r\n    return this.accountService.identity().then(account => {\r\n      if (!authorities || authorities.length === 0) {\r\n        return true;\r\n      }\r\n\r\n      if (account) {\r\n        const hasAnyAuthority = this.accountService.hasAnyAuthority(authorities);\r\n        if (hasAnyAuthority) {\r\n          return true;\r\n        }\r\n        if (isDevMode()) {\r\n          console.error('User has not any of required authorities: ', authorities);\r\n        }\r\n        return false;\r\n      }\r\n\r\n      this.stateStorageService.storeUrl(url);\r\n      this.router.navigate(['accessdenied']).then(() => {\r\n        // only show the login dialog, if the user hasn't logged in yet\r\n        if (!account) {\r\n          this.loginModalService.open();\r\n        }\r\n      });\r\n      return false;\r\n    });\r\n  }\r\n}\r\n"]}]}