{"remainingRequest":"C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\node_modules\\ts-loader\\index.js??ref--9-3!C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\node_modules\\tslint-loader\\index.js!C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\src\\main\\webapp\\app\\shared\\alert\\alert-error.component.ts","dependencies":[{"path":"C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\src\\main\\webapp\\app\\shared\\alert\\alert-error.component.ts","mtime":1559825302314},{"path":"C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\node_modules\\angular2-template-loader\\index.js","mtime":1559824741317},{"path":"C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1559824860230},{"path":"C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1559825261749},{"path":"C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\node_modules\\ts-loader\\index.js","mtime":1559825264809},{"path":"C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\node_modules\\angular-router-loader\\src\\index.js","mtime":1559824740677},{"path":"C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\node_modules\\tslint-loader\\index.js","mtime":1559825264989}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\nvar _a, _b;\r\nconst core_1 = require(\"@angular/core\");\r\nconst ng_jhipster_1 = require(\"ng-jhipster\");\r\nlet JhiAlertErrorComponent = class JhiAlertErrorComponent {\r\n    /* tslint:disable */\r\n    constructor(alertService, eventManager) {\r\n        this.alertService = alertService;\r\n        this.eventManager = eventManager;\r\n        /* tslint:enable */\r\n        this.alerts = [];\r\n        this.cleanHttpErrorListener = eventManager.subscribe('testApp.httpError', response => {\r\n            let i;\r\n            const httpErrorResponse = response.content;\r\n            switch (httpErrorResponse.status) {\r\n                // connection refused, server not reachable\r\n                case 0:\r\n                    this.addErrorAlert('Server not reachable', 'error.server.not.reachable');\r\n                    break;\r\n                case 400:\r\n                    const arr = httpErrorResponse.headers.keys();\r\n                    let errorHeader = null;\r\n                    let entityKey = null;\r\n                    arr.forEach(entry => {\r\n                        if (entry.toLowerCase().endsWith('app-error')) {\r\n                            errorHeader = httpErrorResponse.headers.get(entry);\r\n                        }\r\n                        else if (entry.toLowerCase().endsWith('app-params')) {\r\n                            entityKey = httpErrorResponse.headers.get(entry);\r\n                        }\r\n                    });\r\n                    if (errorHeader) {\r\n                        const entityName = entityKey;\r\n                        this.addErrorAlert(errorHeader, errorHeader, { entityName });\r\n                    }\r\n                    else if (httpErrorResponse.error !== '' && httpErrorResponse.error.fieldErrors) {\r\n                        const fieldErrors = httpErrorResponse.error.fieldErrors;\r\n                        for (i = 0; i < fieldErrors.length; i++) {\r\n                            const fieldError = fieldErrors[i];\r\n                            if (['Min', 'Max', 'DecimalMin', 'DecimalMax'].includes(fieldError.message)) {\r\n                                fieldError.message = 'Size';\r\n                            }\r\n                            // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\r\n                            const convertedField = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\r\n                            const fieldName = convertedField.charAt(0).toUpperCase() + convertedField.slice(1);\r\n                            this.addErrorAlert('Error on field \"' + fieldName + '\"', 'error.' + fieldError.message, { fieldName });\r\n                        }\r\n                    }\r\n                    else if (httpErrorResponse.error !== '' && httpErrorResponse.error.message) {\r\n                        this.addErrorAlert(httpErrorResponse.error.message, httpErrorResponse.error.message, httpErrorResponse.error.params);\r\n                    }\r\n                    else {\r\n                        this.addErrorAlert(httpErrorResponse.error);\r\n                    }\r\n                    break;\r\n                case 404:\r\n                    this.addErrorAlert('Not found', 'error.url.not.found');\r\n                    break;\r\n                default:\r\n                    if (httpErrorResponse.error !== '' && httpErrorResponse.error.message) {\r\n                        this.addErrorAlert(httpErrorResponse.error.message);\r\n                    }\r\n                    else {\r\n                        this.addErrorAlert(httpErrorResponse.error);\r\n                    }\r\n            }\r\n        });\r\n    }\r\n    setClasses(alert) {\r\n        return {\r\n            toast: !!alert.toast,\r\n            [alert.position]: true\r\n        };\r\n    }\r\n    ngOnDestroy() {\r\n        if (this.cleanHttpErrorListener !== undefined && this.cleanHttpErrorListener !== null) {\r\n            this.eventManager.destroy(this.cleanHttpErrorListener);\r\n            this.alerts = [];\r\n        }\r\n    }\r\n    addErrorAlert(message, key, data) {\r\n        const newAlert = {\r\n            type: 'danger',\r\n            msg: message,\r\n            timeout: 5000,\r\n            toast: this.alertService.isToast(),\r\n            scoped: true\r\n        };\r\n        this.alerts.push(this.alertService.addAlert(newAlert, this.alerts));\r\n    }\r\n};\r\nJhiAlertErrorComponent = tslib_1.__decorate([\r\n    core_1.Component({\r\n        selector: 'jhi-alert-error',\r\n        template: `\r\n    <div class=\"alerts\" role=\"alert\">\r\n      <div *ngFor=\"let alert of alerts\" [ngClass]=\"setClasses(alert)\">\r\n        <ngb-alert *ngIf=\"alert && alert.type && alert.msg\" [type]=\"alert.type\" (close)=\"alert.close(alerts)\">\r\n          <pre [innerHTML]=\"alert.msg\"></pre>\r\n        </ngb-alert>\r\n      </div>\r\n    </div>\r\n  `\r\n    }),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof ng_jhipster_1.JhiAlertService !== \"undefined\" && ng_jhipster_1.JhiAlertService) === \"function\" ? _a : Object, typeof (_b = typeof ng_jhipster_1.JhiEventManager !== \"undefined\" && ng_jhipster_1.JhiEventManager) === \"function\" ? _b : Object])\r\n], JhiAlertErrorComponent);\r\nexports.JhiAlertErrorComponent = JhiAlertErrorComponent;\r\n",{"version":3,"file":"C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\src\\main\\webapp\\app\\shared\\alert\\alert-error.component.ts","sourceRoot":"","sources":["C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\node_modules\\tslint-loader\\index.js!C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\src\\main\\webapp\\app\\shared\\alert\\alert-error.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnDestroy } from '@angular/core';\r\nimport { JhiEventManager, JhiAlert, JhiAlertService } from 'ng-jhipster';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'jhi-alert-error',\r\n  template: `\r\n    <div class=\"alerts\" role=\"alert\">\r\n      <div *ngFor=\"let alert of alerts\" [ngClass]=\"setClasses(alert)\">\r\n        <ngb-alert *ngIf=\"alert && alert.type && alert.msg\" [type]=\"alert.type\" (close)=\"alert.close(alerts)\">\r\n          <pre [innerHTML]=\"alert.msg\"></pre>\r\n        </ngb-alert>\r\n      </div>\r\n    </div>\r\n  `\r\n})\r\nexport class JhiAlertErrorComponent implements OnDestroy {\r\n  alerts: any[];\r\n  cleanHttpErrorListener: Subscription;\r\n  /* tslint:disable */\r\n  constructor(private alertService: JhiAlertService, private eventManager: JhiEventManager) {\r\n    /* tslint:enable */\r\n    this.alerts = [];\r\n\r\n    this.cleanHttpErrorListener = eventManager.subscribe('testApp.httpError', response => {\r\n      let i;\r\n      const httpErrorResponse = response.content;\r\n      switch (httpErrorResponse.status) {\r\n        // connection refused, server not reachable\r\n        case 0:\r\n          this.addErrorAlert('Server not reachable', 'error.server.not.reachable');\r\n          break;\r\n\r\n        case 400:\r\n          const arr = httpErrorResponse.headers.keys();\r\n          let errorHeader = null;\r\n          let entityKey = null;\r\n          arr.forEach(entry => {\r\n            if (entry.toLowerCase().endsWith('app-error')) {\r\n              errorHeader = httpErrorResponse.headers.get(entry);\r\n            } else if (entry.toLowerCase().endsWith('app-params')) {\r\n              entityKey = httpErrorResponse.headers.get(entry);\r\n            }\r\n          });\r\n          if (errorHeader) {\r\n            const entityName = entityKey;\r\n            this.addErrorAlert(errorHeader, errorHeader, { entityName });\r\n          } else if (httpErrorResponse.error !== '' && httpErrorResponse.error.fieldErrors) {\r\n            const fieldErrors = httpErrorResponse.error.fieldErrors;\r\n            for (i = 0; i < fieldErrors.length; i++) {\r\n              const fieldError = fieldErrors[i];\r\n              if (['Min', 'Max', 'DecimalMin', 'DecimalMax'].includes(fieldError.message)) {\r\n                fieldError.message = 'Size';\r\n              }\r\n              // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\r\n              const convertedField = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\r\n              const fieldName = convertedField.charAt(0).toUpperCase() + convertedField.slice(1);\r\n              this.addErrorAlert('Error on field \"' + fieldName + '\"', 'error.' + fieldError.message, { fieldName });\r\n            }\r\n          } else if (httpErrorResponse.error !== '' && httpErrorResponse.error.message) {\r\n            this.addErrorAlert(httpErrorResponse.error.message, httpErrorResponse.error.message, httpErrorResponse.error.params);\r\n          } else {\r\n            this.addErrorAlert(httpErrorResponse.error);\r\n          }\r\n          break;\r\n\r\n        case 404:\r\n          this.addErrorAlert('Not found', 'error.url.not.found');\r\n          break;\r\n\r\n        default:\r\n          if (httpErrorResponse.error !== '' && httpErrorResponse.error.message) {\r\n            this.addErrorAlert(httpErrorResponse.error.message);\r\n          } else {\r\n            this.addErrorAlert(httpErrorResponse.error);\r\n          }\r\n      }\r\n    });\r\n  }\r\n\r\n  setClasses(alert) {\r\n    return {\r\n      toast: !!alert.toast,\r\n      [alert.position]: true\r\n    };\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.cleanHttpErrorListener !== undefined && this.cleanHttpErrorListener !== null) {\r\n      this.eventManager.destroy(this.cleanHttpErrorListener);\r\n      this.alerts = [];\r\n    }\r\n  }\r\n\r\n  addErrorAlert(message, key?, data?) {\r\n    const newAlert: JhiAlert = {\r\n      type: 'danger',\r\n      msg: message,\r\n      timeout: 5000,\r\n      toast: this.alertService.isToast(),\r\n      scoped: true\r\n    };\r\n\r\n    this.alerts.push(this.alertService.addAlert(newAlert, this.alerts));\r\n  }\r\n}\r\n"]}]}