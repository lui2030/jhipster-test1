{"remainingRequest":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\ts-loader\\index.js??ref--9-3!C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\tslint-loader\\index.js!C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\src\\main\\webapp\\app\\core\\auth\\state-storage.service.ts","dependencies":[{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\src\\main\\webapp\\app\\core\\auth\\state-storage.service.ts","mtime":1559806071618},{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\tslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\nvar _a;\r\nconst core_1 = require(\"@angular/core\");\r\nconst ngx_webstorage_1 = require(\"ngx-webstorage\");\r\nlet StateStorageService = class StateStorageService {\r\n    constructor($sessionStorage) {\r\n        this.$sessionStorage = $sessionStorage;\r\n    }\r\n    getPreviousState() {\r\n        return this.$sessionStorage.retrieve('previousState');\r\n    }\r\n    resetPreviousState() {\r\n        this.$sessionStorage.clear('previousState');\r\n    }\r\n    storePreviousState(previousStateName, previousStateParams) {\r\n        const previousState = { name: previousStateName, params: previousStateParams };\r\n        this.$sessionStorage.store('previousState', previousState);\r\n    }\r\n    getDestinationState() {\r\n        return this.$sessionStorage.retrieve('destinationState');\r\n    }\r\n    storeUrl(url) {\r\n        this.$sessionStorage.store('previousUrl', url);\r\n    }\r\n    getUrl() {\r\n        return this.$sessionStorage.retrieve('previousUrl');\r\n    }\r\n    storeDestinationState(destinationState, destinationStateParams, fromState) {\r\n        const destinationInfo = {\r\n            destination: {\r\n                name: destinationState.name,\r\n                data: destinationState.data\r\n            },\r\n            params: destinationStateParams,\r\n            from: {\r\n                name: fromState.name\r\n            }\r\n        };\r\n        this.$sessionStorage.store('destinationState', destinationInfo);\r\n    }\r\n};\r\nStateStorageService = tslib_1.__decorate([\r\n    core_1.Injectable({ providedIn: 'root' }),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof ngx_webstorage_1.SessionStorageService !== \"undefined\" && ngx_webstorage_1.SessionStorageService) === \"function\" ? _a : Object])\r\n], StateStorageService);\r\nexports.StateStorageService = StateStorageService;\r\n",{"version":3,"file":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\src\\main\\webapp\\app\\core\\auth\\state-storage.service.ts","sourceRoot":"","sources":["C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\tslint-loader\\index.js!C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\src\\main\\webapp\\app\\core\\auth\\state-storage.service.ts"],"names":[],"mappings":";;;;AAAA,wCAA2C;AAC3C,mDAAuD;AAGvD,IAAa,mBAAmB,GAAhC,MAAa,mBAAmB;IAC9B,YAAoB,eAAsC;QAAtC,oBAAe,GAAf,eAAe,CAAuB;IAAG,CAAC;IAE9D,gBAAgB;QACd,OAAO,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;IACxD,CAAC;IAED,kBAAkB;QAChB,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;IAC9C,CAAC;IAED,kBAAkB,CAAC,iBAAiB,EAAE,mBAAmB;QACvD,MAAM,aAAa,GAAG,EAAE,IAAI,EAAE,iBAAiB,EAAE,MAAM,EAAE,mBAAmB,EAAE,CAAC;QAC/E,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;IAC7D,CAAC;IAED,mBAAmB;QACjB,OAAO,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC;IAC3D,CAAC;IAED,QAAQ,CAAC,GAAW;QAClB,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;IACjD,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;IACtD,CAAC;IAED,qBAAqB,CAAC,gBAAgB,EAAE,sBAAsB,EAAE,SAAS;QACvE,MAAM,eAAe,GAAG;YACtB,WAAW,EAAE;gBACX,IAAI,EAAE,gBAAgB,CAAC,IAAI;gBAC3B,IAAI,EAAE,gBAAgB,CAAC,IAAI;aAC5B;YACD,MAAM,EAAE,sBAAsB;YAC9B,IAAI,EAAE;gBACJ,IAAI,EAAE,SAAS,CAAC,IAAI;aACrB;SACF,CAAC;QACF,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,kBAAkB,EAAE,eAAe,CAAC,CAAC;IAClE,CAAC;CACF,CAAA;AAzCY,mBAAmB;IAD/B,iBAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;iEAEI,sCAAqB,oBAArB,sCAAqB;GAD/C,mBAAmB,CAyC/B;AAzCY,kDAAmB","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { SessionStorageService } from 'ngx-webstorage';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class StateStorageService {\r\n  constructor(private $sessionStorage: SessionStorageService) {}\r\n\r\n  getPreviousState() {\r\n    return this.$sessionStorage.retrieve('previousState');\r\n  }\r\n\r\n  resetPreviousState() {\r\n    this.$sessionStorage.clear('previousState');\r\n  }\r\n\r\n  storePreviousState(previousStateName, previousStateParams) {\r\n    const previousState = { name: previousStateName, params: previousStateParams };\r\n    this.$sessionStorage.store('previousState', previousState);\r\n  }\r\n\r\n  getDestinationState() {\r\n    return this.$sessionStorage.retrieve('destinationState');\r\n  }\r\n\r\n  storeUrl(url: string) {\r\n    this.$sessionStorage.store('previousUrl', url);\r\n  }\r\n\r\n  getUrl() {\r\n    return this.$sessionStorage.retrieve('previousUrl');\r\n  }\r\n\r\n  storeDestinationState(destinationState, destinationStateParams, fromState) {\r\n    const destinationInfo = {\r\n      destination: {\r\n        name: destinationState.name,\r\n        data: destinationState.data\r\n      },\r\n      params: destinationStateParams,\r\n      from: {\r\n        name: fromState.name\r\n      }\r\n    };\r\n    this.$sessionStorage.store('destinationState', destinationInfo);\r\n  }\r\n}\r\n"]}]}