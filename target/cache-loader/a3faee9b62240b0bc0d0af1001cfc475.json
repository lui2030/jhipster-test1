{"remainingRequest":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\ts-loader\\index.js??ref--9-3!C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\tslint-loader\\index.js!C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\src\\main\\webapp\\app\\admin\\configuration\\configuration.service.ts","dependencies":[{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\src\\main\\webapp\\app\\admin\\configuration\\configuration.service.ts","mtime":1559806071448},{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\tslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\nvar _a;\r\nconst core_1 = require(\"@angular/core\");\r\nconst http_1 = require(\"@angular/common/http\");\r\nconst operators_1 = require(\"rxjs/operators\");\r\nconst app_constants_1 = require(\"app/app.constants\");\r\nlet JhiConfigurationService = class JhiConfigurationService {\r\n    constructor(http) {\r\n        this.http = http;\r\n    }\r\n    get() {\r\n        return this.http.get(app_constants_1.SERVER_API_URL + 'management/configprops', { observe: 'response' }).pipe(operators_1.map((res) => {\r\n            const properties = [];\r\n            const propertiesObject = this.getConfigPropertiesObjects(res.body);\r\n            for (const key in propertiesObject) {\r\n                if (propertiesObject.hasOwnProperty(key)) {\r\n                    properties.push(propertiesObject[key]);\r\n                }\r\n            }\r\n            return properties.sort((propertyA, propertyB) => {\r\n                return propertyA.prefix === propertyB.prefix ? 0 : propertyA.prefix < propertyB.prefix ? -1 : 1;\r\n            });\r\n        }));\r\n    }\r\n    getConfigPropertiesObjects(res) {\r\n        // This code is for Spring Boot 2\r\n        if (res['contexts'] !== undefined) {\r\n            for (const key in res['contexts']) {\r\n                // If the key is not bootstrap, it will be the ApplicationContext Id\r\n                // For default app, it is baseName\r\n                // For microservice, it is baseName-1\r\n                if (!key.startsWith('bootstrap')) {\r\n                    return res['contexts'][key]['beans'];\r\n                }\r\n            }\r\n        }\r\n        // by default, use the default ApplicationContext Id\r\n        return res['contexts']['test']['beans'];\r\n    }\r\n    getEnv() {\r\n        return this.http.get(app_constants_1.SERVER_API_URL + 'management/env', { observe: 'response' }).pipe(operators_1.map((res) => {\r\n            const properties = {};\r\n            const propertySources = res.body['propertySources'];\r\n            for (const propertyObject of propertySources) {\r\n                const name = propertyObject['name'];\r\n                const detailProperties = propertyObject['properties'];\r\n                const vals = [];\r\n                for (const keyDetail in detailProperties) {\r\n                    if (detailProperties.hasOwnProperty(keyDetail)) {\r\n                        vals.push({ key: keyDetail, val: detailProperties[keyDetail]['value'] });\r\n                    }\r\n                }\r\n                properties[name] = vals;\r\n            }\r\n            return properties;\r\n        }));\r\n    }\r\n};\r\nJhiConfigurationService = tslib_1.__decorate([\r\n    core_1.Injectable({ providedIn: 'root' }),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" ? _a : Object])\r\n], JhiConfigurationService);\r\nexports.JhiConfigurationService = JhiConfigurationService;\r\n",{"version":3,"file":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\src\\main\\webapp\\app\\admin\\configuration\\configuration.service.ts","sourceRoot":"","sources":["C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\tslint-loader\\index.js!C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\src\\main\\webapp\\app\\admin\\configuration\\configuration.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { SERVER_API_URL } from 'app/app.constants';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class JhiConfigurationService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  get(): Observable<any> {\r\n    return this.http.get(SERVER_API_URL + 'management/configprops', { observe: 'response' }).pipe(\r\n      map((res: HttpResponse<any>) => {\r\n        const properties: any[] = [];\r\n        const propertiesObject = this.getConfigPropertiesObjects(res.body);\r\n        for (const key in propertiesObject) {\r\n          if (propertiesObject.hasOwnProperty(key)) {\r\n            properties.push(propertiesObject[key]);\r\n          }\r\n        }\r\n\r\n        return properties.sort((propertyA, propertyB) => {\r\n          return propertyA.prefix === propertyB.prefix ? 0 : propertyA.prefix < propertyB.prefix ? -1 : 1;\r\n        });\r\n      })\r\n    );\r\n  }\r\n\r\n  getConfigPropertiesObjects(res: Object) {\r\n    // This code is for Spring Boot 2\r\n    if (res['contexts'] !== undefined) {\r\n      for (const key in res['contexts']) {\r\n        // If the key is not bootstrap, it will be the ApplicationContext Id\r\n        // For default app, it is baseName\r\n        // For microservice, it is baseName-1\r\n        if (!key.startsWith('bootstrap')) {\r\n          return res['contexts'][key]['beans'];\r\n        }\r\n      }\r\n    }\r\n    // by default, use the default ApplicationContext Id\r\n    return res['contexts']['test']['beans'];\r\n  }\r\n\r\n  getEnv(): Observable<any> {\r\n    return this.http.get(SERVER_API_URL + 'management/env', { observe: 'response' }).pipe(\r\n      map((res: HttpResponse<any>) => {\r\n        const properties: any = {};\r\n        const propertySources = res.body['propertySources'];\r\n\r\n        for (const propertyObject of propertySources) {\r\n          const name = propertyObject['name'];\r\n          const detailProperties = propertyObject['properties'];\r\n          const vals: any[] = [];\r\n          for (const keyDetail in detailProperties) {\r\n            if (detailProperties.hasOwnProperty(keyDetail)) {\r\n              vals.push({ key: keyDetail, val: detailProperties[keyDetail]['value'] });\r\n            }\r\n          }\r\n          properties[name] = vals;\r\n        }\r\n        return properties;\r\n      })\r\n    );\r\n  }\r\n}\r\n"]}]}