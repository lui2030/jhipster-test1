{"remainingRequest":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\ts-loader\\index.js??ref--9-3!C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\tslint-loader\\index.js!C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\src\\main\\webapp\\app\\core\\user\\user.service.ts","dependencies":[{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\src\\main\\webapp\\app\\core\\user\\user.service.ts","mtime":1559806071628},{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\tslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\nvar _a;\r\nconst core_1 = require(\"@angular/core\");\r\nconst http_1 = require(\"@angular/common/http\");\r\nconst app_constants_1 = require(\"app/app.constants\");\r\nconst request_util_1 = require(\"app/shared/util/request-util\");\r\nlet UserService = class UserService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.resourceUrl = app_constants_1.SERVER_API_URL + 'api/users';\r\n    }\r\n    create(user) {\r\n        return this.http.post(this.resourceUrl, user, { observe: 'response' });\r\n    }\r\n    update(user) {\r\n        return this.http.put(this.resourceUrl, user, { observe: 'response' });\r\n    }\r\n    find(login) {\r\n        return this.http.get(`${this.resourceUrl}/${login}`, { observe: 'response' });\r\n    }\r\n    query(req) {\r\n        const options = request_util_1.createRequestOption(req);\r\n        return this.http.get(this.resourceUrl, { params: options, observe: 'response' });\r\n    }\r\n    delete(login) {\r\n        return this.http.delete(`${this.resourceUrl}/${login}`, { observe: 'response' });\r\n    }\r\n    authorities() {\r\n        return this.http.get(app_constants_1.SERVER_API_URL + 'api/users/authorities');\r\n    }\r\n};\r\nUserService = tslib_1.__decorate([\r\n    core_1.Injectable({ providedIn: 'root' }),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" ? _a : Object])\r\n], UserService);\r\nexports.UserService = UserService;\r\n",{"version":3,"file":"C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\src\\main\\webapp\\app\\core\\user\\user.service.ts","sourceRoot":"","sources":["C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\node_modules\\tslint-loader\\index.js!C:\\Users\\DankOverlord\\Desktop\\Jhipster40000000\\jhipster-test1\\src\\main\\webapp\\app\\core\\user\\user.service.ts"],"names":[],"mappings":";;;;AAAA,wCAA2C;AAC3C,+CAAgE;AAGhE,qDAAmD;AACnD,+DAAmE;AAInE,IAAa,WAAW,GAAxB,MAAa,WAAW;IAGtB,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAF7B,gBAAW,GAAG,8BAAc,GAAG,WAAW,CAAC;IAEX,CAAC;IAExC,MAAM,CAAC,IAAW;QAChB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAQ,IAAI,CAAC,WAAW,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;IAChF,CAAC;IAED,MAAM,CAAC,IAAW;QAChB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAQ,IAAI,CAAC,WAAW,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;IAC/E,CAAC;IAED,IAAI,CAAC,KAAa;QAChB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAQ,GAAG,IAAI,CAAC,WAAW,IAAI,KAAK,EAAE,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;IACvF,CAAC;IAED,KAAK,CAAC,GAAS;QACb,MAAM,OAAO,GAAG,kCAAmB,CAAC,GAAG,CAAC,CAAC;QACzC,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAU,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;IAC5F,CAAC;IAED,MAAM,CAAC,KAAa;QAClB,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,WAAW,IAAI,KAAK,EAAE,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;IACnF,CAAC;IAED,WAAW;QACT,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAW,8BAAc,GAAG,uBAAuB,CAAC,CAAC;IAC3E,CAAC;CACF,CAAA;AA7BY,WAAW;IADvB,iBAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;iEAIP,iBAAU,oBAAV,iBAAU;GAHzB,WAAW,CA6BvB;AA7BY,kCAAW","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { SERVER_API_URL } from 'app/app.constants';\r\nimport { createRequestOption } from 'app/shared/util/request-util';\r\nimport { IUser } from './user.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UserService {\r\n  public resourceUrl = SERVER_API_URL + 'api/users';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  create(user: IUser): Observable<HttpResponse<IUser>> {\r\n    return this.http.post<IUser>(this.resourceUrl, user, { observe: 'response' });\r\n  }\r\n\r\n  update(user: IUser): Observable<HttpResponse<IUser>> {\r\n    return this.http.put<IUser>(this.resourceUrl, user, { observe: 'response' });\r\n  }\r\n\r\n  find(login: string): Observable<HttpResponse<IUser>> {\r\n    return this.http.get<IUser>(`${this.resourceUrl}/${login}`, { observe: 'response' });\r\n  }\r\n\r\n  query(req?: any): Observable<HttpResponse<IUser[]>> {\r\n    const options = createRequestOption(req);\r\n    return this.http.get<IUser[]>(this.resourceUrl, { params: options, observe: 'response' });\r\n  }\r\n\r\n  delete(login: string): Observable<HttpResponse<any>> {\r\n    return this.http.delete(`${this.resourceUrl}/${login}`, { observe: 'response' });\r\n  }\r\n\r\n  authorities(): Observable<string[]> {\r\n    return this.http.get<string[]>(SERVER_API_URL + 'api/users/authorities');\r\n  }\r\n}\r\n"]}]}