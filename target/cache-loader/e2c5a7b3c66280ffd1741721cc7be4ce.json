{"remainingRequest":"C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\node_modules\\ts-loader\\index.js??ref--9-3!C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\node_modules\\tslint-loader\\index.js!C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\src\\main\\webapp\\app\\account\\password-reset\\finish\\password-reset-finish.component.ts","dependencies":[{"path":"C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\src\\main\\webapp\\app\\account\\password-reset\\finish\\password-reset-finish.component.ts","mtime":1559825298944},{"path":"C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\node_modules\\angular2-template-loader\\index.js","mtime":1559824741317},{"path":"C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1559824860230},{"path":"C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1559825261749},{"path":"C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\node_modules\\ts-loader\\index.js","mtime":1559825264809},{"path":"C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\node_modules\\angular-router-loader\\src\\index.js","mtime":1559824740677},{"path":"C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\node_modules\\tslint-loader\\index.js","mtime":1559825264989}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\nvar _a, _b, _c, _d, _e, _f;\r\nconst core_1 = require(\"@angular/core\");\r\nconst forms_1 = require(\"@angular/forms\");\r\nconst router_1 = require(\"@angular/router\");\r\nconst core_2 = require(\"app/core\");\r\nconst password_reset_finish_service_1 = require(\"./password-reset-finish.service\");\r\nlet PasswordResetFinishComponent = class PasswordResetFinishComponent {\r\n    constructor(passwordResetFinishService, loginModalService, route, elementRef, renderer, fb) {\r\n        this.passwordResetFinishService = passwordResetFinishService;\r\n        this.loginModalService = loginModalService;\r\n        this.route = route;\r\n        this.elementRef = elementRef;\r\n        this.renderer = renderer;\r\n        this.fb = fb;\r\n        this.passwordForm = this.fb.group({\r\n            newPassword: ['', [forms_1.Validators.required, forms_1.Validators.minLength(4), forms_1.Validators.maxLength(50)]],\r\n            confirmPassword: ['', [forms_1.Validators.required, forms_1.Validators.minLength(4), forms_1.Validators.maxLength(50)]]\r\n        });\r\n    }\r\n    ngOnInit() {\r\n        this.route.queryParams.subscribe(params => {\r\n            this.key = params['key'];\r\n        });\r\n        this.keyMissing = !this.key;\r\n    }\r\n    ngAfterViewInit() {\r\n        if (this.elementRef.nativeElement.querySelector('#password') != null) {\r\n            this.renderer.invokeElementMethod(this.elementRef.nativeElement.querySelector('#password'), 'focus', []);\r\n        }\r\n    }\r\n    finishReset() {\r\n        this.doNotMatch = null;\r\n        this.error = null;\r\n        const password = this.passwordForm.get(['newPassword']).value;\r\n        const confirmPassword = this.passwordForm.get(['confirmPassword']).value;\r\n        if (password !== confirmPassword) {\r\n            this.doNotMatch = 'ERROR';\r\n        }\r\n        else {\r\n            this.passwordResetFinishService.save({ key: this.key, newPassword: password }).subscribe(() => {\r\n                this.success = 'OK';\r\n            }, () => {\r\n                this.success = null;\r\n                this.error = 'ERROR';\r\n            });\r\n        }\r\n    }\r\n    login() {\r\n        this.modalRef = this.loginModalService.open();\r\n    }\r\n};\r\nPasswordResetFinishComponent = tslib_1.__decorate([\r\n    core_1.Component({\r\n        selector: 'jhi-password-reset-finish',\r\n        templateUrl: './password-reset-finish.component.html'\r\n    }),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof password_reset_finish_service_1.PasswordResetFinishService !== \"undefined\" && password_reset_finish_service_1.PasswordResetFinishService) === \"function\" ? _a : Object, typeof (_b = typeof core_2.LoginModalService !== \"undefined\" && core_2.LoginModalService) === \"function\" ? _b : Object, typeof (_c = typeof router_1.ActivatedRoute !== \"undefined\" && router_1.ActivatedRoute) === \"function\" ? _c : Object, typeof (_d = typeof core_1.ElementRef !== \"undefined\" && core_1.ElementRef) === \"function\" ? _d : Object, typeof (_e = typeof core_1.Renderer !== \"undefined\" && core_1.Renderer) === \"function\" ? _e : Object, typeof (_f = typeof forms_1.FormBuilder !== \"undefined\" && forms_1.FormBuilder) === \"function\" ? _f : Object])\r\n], PasswordResetFinishComponent);\r\nexports.PasswordResetFinishComponent = PasswordResetFinishComponent;\r\n",{"version":3,"file":"C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\src\\main\\webapp\\app\\account\\password-reset\\finish\\password-reset-finish.component.ts","sourceRoot":"","sources":["C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\node_modules\\tslint-loader\\index.js!C:\\Users\\luigi\\Desktop\\test19\\jhipster-test1\\src\\main\\webapp\\app\\account\\password-reset\\finish\\password-reset-finish.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit, AfterViewInit, Renderer, ElementRef } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\n\r\nimport { LoginModalService } from 'app/core';\r\nimport { PasswordResetFinishService } from './password-reset-finish.service';\r\n\r\n@Component({\r\n  selector: 'jhi-password-reset-finish',\r\n  templateUrl: './password-reset-finish.component.html'\r\n})\r\nexport class PasswordResetFinishComponent implements OnInit, AfterViewInit {\r\n  doNotMatch: string;\r\n  error: string;\r\n  keyMissing: boolean;\r\n  success: string;\r\n  modalRef: NgbModalRef;\r\n  key: string;\r\n\r\n  passwordForm = this.fb.group({\r\n    newPassword: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(50)]],\r\n    confirmPassword: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(50)]]\r\n  });\r\n\r\n  constructor(\r\n    private passwordResetFinishService: PasswordResetFinishService,\r\n    private loginModalService: LoginModalService,\r\n    private route: ActivatedRoute,\r\n    private elementRef: ElementRef,\r\n    private renderer: Renderer,\r\n    private fb: FormBuilder\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.route.queryParams.subscribe(params => {\r\n      this.key = params['key'];\r\n    });\r\n    this.keyMissing = !this.key;\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (this.elementRef.nativeElement.querySelector('#password') != null) {\r\n      this.renderer.invokeElementMethod(this.elementRef.nativeElement.querySelector('#password'), 'focus', []);\r\n    }\r\n  }\r\n\r\n  finishReset() {\r\n    this.doNotMatch = null;\r\n    this.error = null;\r\n    const password = this.passwordForm.get(['newPassword']).value;\r\n    const confirmPassword = this.passwordForm.get(['confirmPassword']).value;\r\n    if (password !== confirmPassword) {\r\n      this.doNotMatch = 'ERROR';\r\n    } else {\r\n      this.passwordResetFinishService.save({ key: this.key, newPassword: password }).subscribe(\r\n        () => {\r\n          this.success = 'OK';\r\n        },\r\n        () => {\r\n          this.success = null;\r\n          this.error = 'ERROR';\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  login() {\r\n    this.modalRef = this.loginModalService.open();\r\n  }\r\n}\r\n"]}]}